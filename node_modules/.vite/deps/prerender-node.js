import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:zlib
var require_zlib = __commonJS({
  "browser-external:zlib"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "zlib" has been externalized for browser compatibility. Cannot access "zlib.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/prerender-node/index.js
var require_prerender_node = __commonJS({
  "node_modules/prerender-node/index.js"(exports, module) {
    var http = require_http();
    var https = require_https();
    var url = require_url();
    var zlib = require_zlib();
    var adapters = { "http:": http, "https:": https };
    var prerender = module.exports = function(req, res, next) {
      if (!prerender.shouldShowPrerenderedPage(req))
        return next();
      prerender.beforeRenderFn(req, function(err, cachedRender) {
        if (!err && cachedRender) {
          if (typeof cachedRender == "string") {
            res.writeHead(200, {
              "Content-Type": "text/html"
            });
            return res.end(cachedRender);
          } else if (typeof cachedRender == "object") {
            res.writeHead(cachedRender.status || 200, {
              "Content-Type": "text/html"
            });
            return res.end(cachedRender.body || "");
          }
        }
        prerender.getPrerenderedPageResponse(req, function(err2, prerenderedResponse) {
          var options = prerender.afterRenderFn(err2, req, prerenderedResponse);
          if (options && options.cancelRender) {
            return next();
          }
          if (prerenderedResponse) {
            res.writeHead(prerenderedResponse.statusCode, prerenderedResponse.headers);
            return res.end(prerenderedResponse.body);
          } else {
            next(err2);
          }
        });
      });
    };
    prerender.crawlerUserAgents = [
      "googlebot",
      "Google-InspectionTool",
      "Yahoo! Slurp",
      "bingbot",
      "yandex",
      "baiduspider",
      "facebookexternalhit",
      "twitterbot",
      "rogerbot",
      "linkedinbot",
      "embedly",
      "quora link preview",
      "showyoubot",
      "outbrain",
      "pinterest/0.",
      "developers.google.com/+/web/snippet",
      "slackbot",
      "vkShare",
      "W3C_Validator",
      "redditbot",
      "Applebot",
      "WhatsApp",
      "flipboard",
      "tumblr",
      "bitlybot",
      "SkypeUriPreview",
      "nuzzel",
      "Discordbot",
      "Google Page Speed",
      "Qwantify",
      "pinterestbot",
      "Bitrix link preview",
      "XING-contenttabreceiver",
      "Chrome-Lighthouse",
      "TelegramBot",
      "SeznamBot",
      "screaming frog SEO spider",
      "AhrefsBot",
      "AhrefsSiteAudit",
      "Iframely"
    ];
    prerender.extensionsToIgnore = [
      ".js",
      ".css",
      ".xml",
      ".less",
      ".png",
      ".jpg",
      ".jpeg",
      ".gif",
      ".pdf",
      ".doc",
      ".txt",
      ".ico",
      ".rss",
      ".zip",
      ".mp3",
      ".rar",
      ".exe",
      ".wmv",
      ".doc",
      ".avi",
      ".ppt",
      ".mpg",
      ".mpeg",
      ".tif",
      ".wav",
      ".mov",
      ".psd",
      ".ai",
      ".xls",
      ".mp4",
      ".m4a",
      ".swf",
      ".dat",
      ".dmg",
      ".iso",
      ".flv",
      ".m4v",
      ".torrent",
      ".woff",
      ".woff2",
      ".ttf",
      ".svg",
      ".webmanifest",
      ".webp"
    ];
    prerender.whitelisted = function(whitelist) {
      prerender.whitelist = typeof whitelist === "string" ? [whitelist] : whitelist;
      return this;
    };
    prerender.blacklisted = function(blacklist) {
      prerender.blacklist = typeof blacklist === "string" ? [blacklist] : blacklist;
      return this;
    };
    prerender.shouldShowPrerenderedPage = function(req) {
      var userAgent = req.headers["user-agent"], bufferAgent = req.headers["x-bufferbot"], isRequestingPrerenderedPage = false;
      if (!userAgent)
        return false;
      if (req.method != "GET" && req.method != "HEAD")
        return false;
      if (req.headers && req.headers["x-prerender"])
        return false;
      var parsedUrl = url.parse(req.url, true);
      var parsedQuery = parsedUrl.query;
      if (parsedQuery && parsedQuery["_escaped_fragment_"] !== void 0)
        isRequestingPrerenderedPage = true;
      if (prerender.crawlerUserAgents.some(function(crawlerUserAgent) {
        return userAgent.toLowerCase().indexOf(crawlerUserAgent.toLowerCase()) !== -1;
      }))
        isRequestingPrerenderedPage = true;
      if (bufferAgent)
        isRequestingPrerenderedPage = true;
      var parsedPathname = parsedUrl.pathname.toLowerCase();
      if (prerender.extensionsToIgnore.some(function(extension) {
        return parsedPathname.endsWith(extension);
      }))
        return false;
      if (Array.isArray(this.whitelist) && this.whitelist.every(function(whitelisted) {
        return new RegExp(whitelisted).test(req.url) === false;
      }))
        return false;
      if (Array.isArray(this.blacklist) && this.blacklist.some(function(blacklisted) {
        var blacklistedUrl = false, blacklistedReferer = false, regex = new RegExp(blacklisted);
        blacklistedUrl = regex.test(req.url) === true;
        if (req.headers["referer"])
          blacklistedReferer = regex.test(req.headers["referer"]) === true;
        return blacklistedUrl || blacklistedReferer;
      }))
        return false;
      return isRequestingPrerenderedPage;
    };
    prerender.prerenderServerRequestOptions = {};
    prerender.getPrerenderedPageResponse = function(req, callback) {
      var options = {
        headers: {}
      };
      for (var attrname in this.prerenderServerRequestOptions) {
        options[attrname] = this.prerenderServerRequestOptions[attrname];
      }
      if (this.forwardHeaders === true) {
        Object.keys(req.headers).forEach(function(h) {
          if (h == "host") {
            return;
          }
          options.headers[h] = req.headers[h];
        });
      }
      options.headers["User-Agent"] = req.headers["user-agent"];
      options.headers["Accept-Encoding"] = "gzip";
      if (this.prerenderToken || process.env.PRERENDER_TOKEN) {
        options.headers["X-Prerender-Token"] = this.prerenderToken || process.env.PRERENDER_TOKEN;
      }
      const url2 = new URL(prerender.buildApiUrl(req));
      adapters[url2.protocol].get(url2, options, (response) => {
        if (response.headers["content-encoding"] && response.headers["content-encoding"] === "gzip") {
          prerender.gunzipResponse(response, callback);
        } else {
          prerender.plainResponse(response, callback);
        }
      }).on("error", function(err) {
        callback(err);
      });
    };
    prerender.gunzipResponse = function(response, callback) {
      var gunzip = zlib.createGunzip(), content = "";
      gunzip.on("data", function(chunk) {
        content += chunk;
      });
      gunzip.on("end", function() {
        response.body = content;
        delete response.headers["content-encoding"];
        delete response.headers["content-length"];
        callback(null, response);
      });
      gunzip.on("error", function(err) {
        callback(err);
      });
      response.pipe(gunzip);
    };
    prerender.plainResponse = function(response, callback) {
      var content = "";
      response.on("data", function(chunk) {
        content += chunk;
      });
      response.on("end", function() {
        response.body = content;
        callback(null, response);
      });
    };
    prerender.buildApiUrl = function(req) {
      var prerenderUrl = prerender.getPrerenderServiceUrl();
      var forwardSlash = prerenderUrl.indexOf("/", prerenderUrl.length - 1) !== -1 ? "" : "/";
      var protocol = req.connection.encrypted ? "https" : "http";
      if (req.headers["cf-visitor"]) {
        var match = req.headers["cf-visitor"].match(/"scheme":"(http|https)"/);
        if (match)
          protocol = match[1];
      }
      if (req.headers["x-forwarded-proto"]) {
        protocol = req.headers["x-forwarded-proto"].split(",")[0];
      }
      if (this.protocol) {
        protocol = this.protocol;
      }
      var fullUrl = protocol + "://" + (this.host || req.headers["x-forwarded-host"] || req.headers["host"]) + req.url;
      return prerenderUrl + forwardSlash + fullUrl;
    };
    prerender.getPrerenderServiceUrl = function() {
      return this.prerenderServiceUrl || process.env.PRERENDER_SERVICE_URL || "https://service.prerender.io/";
    };
    prerender.beforeRenderFn = function(req, done) {
      if (!this.beforeRender)
        return done();
      return this.beforeRender(req, done);
    };
    prerender.afterRenderFn = function(err, req, prerender_res) {
      if (!this.afterRender)
        return;
      return this.afterRender(err, req, prerender_res);
    };
    prerender.set = function(name, value) {
      this[name] = value;
      return this;
    };
  }
});
export default require_prerender_node();
//# sourceMappingURL=prerender-node.js.map
